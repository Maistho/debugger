När man börjar med ett nytt problem så lägger man in specifikation för det man arbetar på i lämplig plats med
förklaring på syfte, returnvärden samt parametrar.

Server

	Tar emot en json som innehåller:
	"method", kan vara:

Server Methods:
	Specify method using {"method" => "thing"}

	"getBug", Requesting a problem
		requires:
			"id", Problem ID
		or
			"language", eg. "p"
			"difficulty", eg. "0"
		returns:
			"id", Problem ID
			"language",
			"code", Problem code

	"post", Posting a solution, requires:
		"code", Code to test
		"id", Problem ID

	"getScores", NYI, requires:
		"player_id",
		"id",

TODO: Fix remaining part of MasterAPI
--------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - -
  Class Reception
    #kommunicerar med klient och serverstruktur

    def run(port)
      #behöver körport
      #startar server
    return nil

    def handlerequest(fromclientsocket)
      #hanterar I/O till klienten
      #avkodar anrop
      #kör anrop till serverdelar
      #svarar till klient
      !Har tester i ServerProbe.rb
    return nil

- - - - - - - - - - - - - - - - - - - - - - - - -

  Class ScorePlayerDB
    #loggar spelare och poäng

    def pScores(id)
      #letar upp poäng för användare med id
    return [?]

    def pLeaderboard(what)
      #tbd
    return [?]

- - - - - - - - - - - - - - - - - - - - - - - - -
  Class ProblemDB
    #problemdatabas

    def fetchRand(diff,lang)
      #plockar ut ett slumpid
    return ?nil

    def pProblem(id)
      #returnerar en bug
    return ?bug
- - - - - - - - - - - - - - - - - - - - - - - - -
  Class TestServer
    #utvärdera, kompilera, och köra kod

    def pSolution(uid,code)
      #ska även skicka vidare poängförändringar
      #till ScorePlayerDB
    return [?]

--------------------------------------------------
Klient
- - - - - - - - - - - - - - - - - - - - - - - - -

- - - - - - - - - - - - - - - - - - - - - - - - -

- - - - - - - - - - - - - - - - - - - - - - - - -
